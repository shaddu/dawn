{% doc %}
  @prompt
    Modify an existing section to transform the collection images into a slideshow carousel that showcases collection products

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .collection-carousel-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    margin-bottom: 30px;
  }

  .collection-carousel__track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
  }

  .collection-carousel__slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    width: 100%;
    padding: 0 {{ block.settings.slide_gap }}px;
    box-sizing: border-box;
  }

  @media screen and (min-width: 750px) {
    .collection-carousel__slide-{{ ai_gen_id }} {
      flex: 0 0 calc(100% / {{ block.settings.slides_per_view }});
      width: calc(100% / {{ block.settings.slides_per_view }});
    }
  }

  .collection-carousel__image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: {{ block.settings.image_ratio }}%;
    overflow: hidden;
    border-radius: {{ block.settings.image_border_radius }}px;
  }

  .collection-carousel__image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .collection-carousel__placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .collection-carousel__placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 500px;
    max-height: 500px;
  }

  .collection-carousel__content-{{ ai_gen_id }} {
    padding: 15px 0;
    text-align: {{ block.settings.text_alignment }};
  }

  .collection-carousel__title-{{ ai_gen_id }} {
    margin: 0 0 5px;
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    color: {{ block.settings.title_color }};
  }

  .collection-carousel__description-{{ ai_gen_id }} {
    margin: 0 0 10px;
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
  }

  .collection-carousel__button-{{ ai_gen_id }} {
    display: inline-block;
    padding: 8px 16px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-decoration: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 14px;
    transition: background-color 0.3s ease;
  }

  .collection-carousel__button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .collection-carousel__nav-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
  }

  .collection-carousel__nav-button-{{ ai_gen_id }} {
    width: 40px;
    height: 40px;
    border: none;
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_text_color }};
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .collection-carousel__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
  }

  .collection-carousel__dots-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 15px;
  }

  .collection-carousel__dot-{{ ai_gen_id }} {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    opacity: 0.5;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }

  .collection-carousel__dot-{{ ai_gen_id }}.active {
    opacity: 1;
  }

  .collection-carousel__slide-{{ ai_gen_id }}:hover .collection-carousel__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }
{% endstyle %}

<collection-carousel-{{ ai_gen_id }}
  class="collection-carousel-{{ ai_gen_id }}"
  data-slides-per-view="{{ block.settings.slides_per_view }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-speed="{{ block.settings.autoplay_speed }}"
  {{ block.shopify_attributes }}
><div class="collection-carousel__track-{{ ai_gen_id }}">
    {% for collection in block.settings.collection_list %}
      <div class="collection-carousel__slide-{{ ai_gen_id }}" data-index="{{ forloop.index0 }}">
        <a href="{{ collection.url }}" class="collection-carousel__image-container-{{ ai_gen_id }}">
          {% if collection.image %}
            <img
              src="{{ collection.image | image_url: width: 800 }}"
              alt="{{ collection.title | escape }}"
              loading="lazy"
              class="collection-carousel__image-{{ ai_gen_id }}"
            >
          {% else %}
            <div class="collection-carousel__placeholder-{{ ai_gen_id }}">
              {{ 'collection-apparel-1' | placeholder_svg_tag }}
            </div>
          {% endif %}
        </a>
        <div class="collection-carousel__content-{{ ai_gen_id }}">
          <h3 class="collection-carousel__title-{{ ai_gen_id }}">{{ collection.title }}</h3>
          {% if block.settings.show_description and collection.description != blank %}
            <div class="collection-carousel__description-{{ ai_gen_id }}">
              {{ collection.description | strip_html | truncatewords: 15 }}
            </div>
          {% endif %}
          {% if block.settings.show_button %}
            <a href="{{ collection.url }}" class="collection-carousel__button-{{ ai_gen_id }}">
              {{ block.settings.button_text }}
            </a>
          {% endif %}
        </div>
      </div>
    {% endfor %}
  </div>

  {% if block.settings.show_navigation %}
    <div class="collection-carousel__nav-{{ ai_gen_id }}">
      <button class="collection-carousel__nav-button-{{ ai_gen_id }} prev" aria-label="Previous slide">
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="collection-carousel__nav-button-{{ ai_gen_id }} next" aria-label="Next slide">
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
  {% endif %}

  {% if block.settings.show_dots %}
    <div class="collection-carousel__dots-{{ ai_gen_id }}">
      {% for collection in block.settings.collection_list %}
        <div class="collection-carousel__dot-{{ ai_gen_id }}{% if forloop.first %} active{% endif %}" data-index="{{ forloop.index0 }}"></div>
      {% endfor %}
    </div>
  {% endif %}
</collection-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionCarousel extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('.collection-carousel__track-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.collection-carousel__slide-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.collection-carousel__dot-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.collection-carousel__nav-button-{{ ai_gen_id }}.prev');
        this.nextButton = this.querySelector('.collection-carousel__nav-button-{{ ai_gen_id }}.next');
        this.slidesPerView = parseInt(this.dataset.slidesPerView) || 1;
        this.autoplay = this.dataset.autoplay === 'true';
        this.autoplaySpeed = parseInt(this.dataset.autoplaySpeed) || 5000;
        this.currentIndex = 0;
        this.slideCount = this.slides.length;
        this.autoplayInterval = null;}

      connectedCallback() {
        if (this.slideCount <= 1) return;
        
        this.setupEventListeners();
        this.updateCarousel();
        
        if (this.autoplay) {
          this.startAutoplay();
        }
        // Handle resize events
        window.addEventListener('resize', this.handleResize.bind(this));
        this.handleResize();
      }

      disconnectedCallback() {
        this.stopAutoplay();
        window.removeEventListener('resize', this.handleResize.bind(this));
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.navigate(-1));
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.navigate(1));
        }
        
        this.dots.forEach((dot, index) => {
          dot.addEventListener('click', () => this.goToSlide(index));
        });
        // Pause autoplay on hover
        this.addEventListener('mouseenter', () => this.stopAutoplay());
        this.addEventListener('mouseleave', () => {
          if (this.autoplay) {
            this.startAutoplay();
          }
        });
      }

      handleResize() {
        // Adjust for mobile
        if (window.innerWidth < 750) {
          this.slidesPerView = 1;
        } else {
          this.slidesPerView = parseInt(this.dataset.slidesPerView) || 1;
        }
        this.updateCarousel();
      }

      navigate(direction) {
        this.stopAutoplay();
        this.currentIndex = (this.currentIndex + direction + this.slideCount) % this.slideCount;
        this.updateCarousel();
        if (this.autoplay) {
          this.startAutoplay();
        }
      }

      goToSlide(index) {
        this.stopAutoplay();
        this.currentIndex = index;
        this.updateCarousel();
        if (this.autoplay) {
          this.startAutoplay();
        }
      }

      updateCarousel() {
        // Calculate the maximum index based on slidesPerView
        const maxIndex = Math.max(0, this.slideCount - this.slidesPerView);
        const boundedIndex = Math.min(this.currentIndex, maxIndex);
        
        // Calculate the transform value
        const translateX = -boundedIndex * (100 / this.slidesPerView);
        this.track.style.transform = `translateX(${translateX}%)`;
        
        // Update dots
        this.dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === boundedIndex);
        });
      }

      startAutoplay() {
        if (this.autoplayInterval) return;
        this.autoplayInterval = setInterval(() => {
          this.navigate(1);
        }, this.autoplaySpeed);
      }

      stopAutoplay() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
          this.autoplayInterval = null;
        }
      }
    }

    customElements.define('collection-carousel-{{ ai_gen_id }}', CollectionCarousel);
  })();
</script>

{% schema %}
{
  "name": "Collection Carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Collections"
    },
    {
      "type": "collection_list",
      "id": "collection_list",
      "label": "Collections",
      "limit": 12
    },
    {
      "type": "header",
      "content": "Carousel Settings"
    },
    {
      "type": "range",
      "id": "slides_per_view",
      "min": 1,
      "max": 4,
      "step": 1,
      "default": 3,
      "label": "Collections per row"
    },
    {
      "type": "range",
      "id": "slide_gap",
      "min": 0,
      "max": 30,
      "step": 5,
      "default": 15,
      "unit": "px",
      "label": "Space between slides"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Auto-rotate collections",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 3,
      "max": 9,
      "step": 1,
      "unit": "s",
      "label": "Change collections every",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation buttons",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots",
      "default": true
    },
    {
      "type": "header",
      "content": "Image Settings"
    },
    {
      "type": "range",
      "id": "image_ratio",
      "min": 50,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "Image aspect ratio",
      "default": 70
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Content Settings"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center",
      "label": "Text alignment"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 14,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 18
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#121212"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show collection description",
      "default": true
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 14
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "checkbox",
      "id": "show_button",
      "label": "Show button",
      "default": true
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "View Collection"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 4
    },
    {
      "type": "header",
      "content": "Navigation Settings"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#f3f3f3"
    },
    {
      "type": "color",
      "id": "nav_button_text_color",
      "label": "Navigation button icon color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#121212"
    }
  ],
  "presets": [
    {
      "name": "Collection Carousel"
    }
  ]
}
{% endschema %}